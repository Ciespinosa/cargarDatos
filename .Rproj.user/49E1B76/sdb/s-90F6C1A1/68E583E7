{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Cargando datos\"\nauthor: \"Carlos Iván Espinosa\"\ndate: \"7 de octubre de 2016\"\noutput:\n  pdf_document:\n    toc: yes\n  html_document:\n    highlight: haddock\n    number_sections: yes\n    theme: cosmo\n    toc: yes\n---\n\n\n<b><br></b>\n\n#<b>Creando un proyecto en RStudio</b>\n\n---------\n<b><br></b>\n\n__¿Cómo creamos un proyecto?__\n\nVeamos el siguiente video a ver si nos ayuda.\n\n\n<center><video src=\"cat.mp4\" type=\"video/mp4\" autoplay controls></video></center>\n\n\n\n##Conozcamos rStudio antes de empezar\n\n\n\n#<b>Leyendo Datos</b>\n\n----------\n\nVamos a leer unos datos alamacenados en formato csv. Existen varias formas para leer datos desde un archivo txt, csv o xls. Empezaremos con los primeros formatos. Antes de nada necesitamos los datos con los que vamos a trabajar los podemos encontrar [aquí](https://github.com/dhduncan/ConoceR/tree/master/Dominio_de_datos_1/ciclovia.csv) en formato csv y [aquí](https://github.com/dhduncan/ConoceR/tree/master/Dominio_de_datos_1/ciclovia.xlsx) en formato xlsx. Descargamos los archivos y los ponemos en la carpeta del proyecto. Para descargar los archivos csv hacer clic en __RAW__\n\n1. El primer paso es saber si nuestro archivo esta en la ubicación del directorio de mi proyecto, para esto utilizaremos la función __dir()__\n\nTeclea en tu consola esta función y mira si tus datos se encuentran ahí?\n\n2. Ahora a cargar los datos usando las funciones read.table() y read_excel()\n\n##Usando read.table\n\n```{r}\nameLoja<-read.table(\"AMEBIASIS_LOJA.csv\", header=TRUE, sep=';')\n\n```\n\nSi en la consola no ha salido ningun error eso quiere decir que los datos han sido cargados correctamente. Antes de continuar supongo que hay algunas dudas con el código que acabamos de subir. \n\n*¿Que significa header=TRUE?*\n\nBueno lo que le estamos diciendo es que la primera fila se encuentran los nombres de las variables. \n\n*Y __sep__?\n\nEn este caso, estamos diciendo que separa la separación entre columnas es una coma.  Al ser formato csv esto es evidente, pero podría tener un txt separado por tabulaciones por ejemplo, o por cualquier otro caracter.\n\n##Usando read_excel\n\n```{r}\nrequire(readxl)\n\nread_excel(\"AMEBIASIS_LOJA.xlsx\", \n                      sheet = 1, na = \"NA\")\n\n```\n\n>¿Qué paso?\n\nLa función se ejecuto pero solo se escribió en la consola, claro olvidamos _asignar_ estos datos a un objeto, para _asignar_ usamos __<-__ y antes de esto ponemos el nombre del  objeto.\n\n\n```{r}\nlibrary(readxl)\n\nameLojaE<-read_excel(\"AMEBIASIS_LOJA.xlsx\", \n                      sheet = 1, na = \"NA\")\n\n```\n\nLe he puesto a este objeto al final _E_ para saber que es la tabla que he abierto desde excel, si no ponemos esto el objeto que creamos antes será sobrescrito, y r no nos avisará que se sobrescribe así que hay que tener cuidado.\n\nCuando leemos desde un archivo excel lo primero que debemos hacer es llamar al paquete que nos permite leer archivos excel ´readxl´ esto lo hacemos con la función _library_ podríamos utilizar tambien la función _require_.  \n\nLo siguiente es escribir el nombre del archivo, recuerde que R es sencible a las mayusculas así que debe poner exactamente como lo muestra el nombre de su archivo.  Posteriormente, le decimos en que hoja se encuentran los datos _sheet_ y que debe poner en las celdas vacias _na_, en este este caso le decimos que ponga \"NA\" \n\n\n## Verificando los datos\n\nSiempre cuando cargo unos datos es necesario asegurarnos que los datos estan bien subidos, para esto utilizaremos dos funciones __head__ y __str__\n\n```{r}\nhead(ameLoja)\n\n```\n\nComo ven esta función lo que hace es mostrarnos los seis primeros datos de cada columna. Esto es muy importante para chequear que no se haya cargado los datos de forma erronea. Ahora veamos lo que hace __str__\n\n\n```{r}\nstr(ameLoja)\n```\n\nEsta función nos permite saber las características del objeto y luego, de cada una de las variables. Como vemos tenemos diferentes tipos de variables algunas son categóricas y otras numéricas.\n\nSeguramente se estarán preguntando que son estos datos, bueno estos datos corresponden a estadísticas de amebiasis en la provincia de Loja. Vamos a realizar un primer gráfico para conocer como la insidencia de amebiasis se distribuye en los diferentes cantones.\n\n```{r}\n\ntable(ameLoja$Cantón)\n\n```\n\nCreo que sería mejor verlo en un gráfico, lo que hacemos es poner plot al principio de la función table.\n\n```{r}\npar(mar=c(9,3,2,1))\nplot(table(ameLoja$Cantón), las=2, cex.axis=0.8)\n```\n\nComo podemos ver en Loja la cantidad de Amebiasis es mucho mayor que en los otros cantones.\n\n> Pero, les parece que esta conclusión de que en el Cantón Loja hay más amebiasis es correcta.\n\nBueno les dejo con la duda, o mejor con el trabajo.\n\nUstedes deben trabajar con estos datos y decir si esta conclusión es cierta.\n\n#__Ejercicio 1.__\n\n----------\n\nSeguramente seguirán preguntandose si el gráfico de amebiasis es correcto o no (_eso espero_).\n\n`¿Qué realmente me esta diciendo el gráfico?`\n\nLo que realmente me dice, es la cantidad de amebiasis en cada cantón, no la incidencia de amebiasis.  Vamos a trabajar. Contesten las siguientes preguntas y desarrollen los ejercicios.\n\n1. Busque en internet la definición de insidencia y corrija los datos que hemos obtenido.  Para esto debemos _asignar_ la tabla en un objeto, espero recuerde como hacerlo.\n\n2. Queremos graficar estos resultados, pero que se grafique de una forma ordenada del cantón con menos incidencia al cantón con más incidencia. Para esto utilizaremos la función __order__. Use _?_ o _help()_ para saber como puede utilizar la función order.\n\n\nCon esto hemos terminado el primer ejercicio.  Espero que esten satisfechos ya estan trabajando en `r` han aprendido como cargar los datos usando read.table y read_xls, han visto como podemos utilizar funciones como; order, head y str, y hemos iniciado a trabajar con gráficas.  En las siguientes lecciones nos adentraremos en funciones que nos servirán para conocer nuestros datos.  \n<b><br></b>\n<b><br></b>\n\n<center>![lo hice](prSqGTW.gif)</center>\n\n",
    "created" : 1475857423278.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1540181073",
    "id" : "68E583E7",
    "lastKnownWriteTime" : 1475857516,
    "last_content_update" : 1475857516295,
    "path" : "~/GitHub/cargarDatos/index.Rmd",
    "project_path" : "index.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}